return {
  "ibhagwan/fzf-lua",
  -- optional for icon support
  dependencies = { "nvim-tree/nvim-web-devicons" },
  config = function()
    require("fzf-lua").setup({
      -- fzf_opts auto-inferred from get_fzf_args()
      fzf_opts = {
        ["--ansi"] = "",
        ["--info"] = "inline",  
        ["--height"] = "100%",
        ["--layout"] = "reverse",
        ["--border"] = "none",
      },
      winopts = {
        preview = {
          default = "bat",
          border = 'border',
          wrap = 'nowrap',
          hidden = 'nohidden',
          vertical = 'down:45%',
          horizontal = 'right:60%',
          layout = 'flex',
          flip_columns = 120,
          title = true,
          title_pos = "center",
          scrollbar = 'float',
          scrolloff = '-2',
          scrollchars = {'█', '' },
          delay = 100,
          winopts = {
            number = true,
            relativenumber = false,
            cursorline = true,
            cursorlineopt = 'both',
            cursorcolumn = false,
            signcolumn = 'no',
            list = false,
            foldenable = false,
            foldmethod = 'manual',
          },
        },
        height = 0.85,
        width = 0.80,
        row = 0.35,
        col = 0.50,
        border = { '╭', '─', '╮', '│', '╯', '─', '╰', '│' },
        fullscreen = false,
      },
      keymap = {
        builtin = {
          ["<F1>"] = "toggle-help",
          ["<F2>"] = "toggle-fullscreen",
          ["<F3>"] = "toggle-preview-wrap",
          ["<F4>"] = "toggle-preview",
          ["<F5>"] = "toggle-preview-ccw",
          ["<F6>"] = "toggle-preview-cw",
          ["<S-down>"] = "preview-page-down",
          ["<S-up>"] = "preview-page-up",
          ["<S-left>"] = "preview-page-reset",
        },
        fzf = {
          ["ctrl-z"] = "abort",
          ["ctrl-u"] = "unix-line-discard",
          ["ctrl-f"] = "half-page-down",
          ["ctrl-b"] = "half-page-up",
          ["ctrl-a"] = "beginning-of-line",
          ["ctrl-e"] = "end-of-line",
          ["alt-a"] = "toggle-all",
          ["f3"] = "toggle-preview-wrap",
          ["f4"] = "toggle-preview",
          ["shift-down"] = "preview-page-down",
          ["shift-up"] = "preview-page-up",
        },
      },
      actions = {
        files = {
          ["default"] = require("fzf-lua.actions").file_edit_or_qf,
          ["ctrl-x"] = require("fzf-lua.actions").file_split,
          ["ctrl-v"] = require("fzf-lua.actions").file_vsplit,
          ["ctrl-t"] = require("fzf-lua.actions").file_tabedit,
          ["alt-q"] = require("fzf-lua.actions").file_sel_to_qf,
          ["alt-l"] = require("fzf-lua.actions").file_sel_to_ll,
        },
        buffers = {
          ["default"] = require("fzf-lua.actions").buf_edit,
          ["ctrl-x"] = require("fzf-lua.actions").buf_split,
          ["ctrl-v"] = require("fzf-lua.actions").buf_vsplit,
          ["ctrl-t"] = require("fzf-lua.actions").buf_tabedit,
          ["ctrl-d"] = require("fzf-lua.actions").buf_del,
        }
      },
      grep = {
        prompt = 'Rg❯ ',
        input_prompt = 'Grep For❯ ',
        multiprocess = true,
        git_icons = true,
        file_icons = true,
        color_icons = true,
        grep_opts = "--binary-files=without-match --line-number --recursive --color=auto --perl-regexp -e",
        rg_opts = "--column --line-number --no-heading --color=always --smart-case --max-columns=4096 -e",
        rg_glob = false,
        glob_flag = "--iglob",
        glob_separator = "%s%-%-",
      },
      files = {
        prompt = 'Files❯ ',
        multiprocess = true,
        git_icons = true,
        file_icons = true,
        color_icons = true,
      },
      buffers = {
        prompt = 'Buffers❯ ',
        file_icons = true,
        color_icons = true,
        sort_lastused = true,
        show_unloaded = true,
        cwd_only = false,
      },
      oldfiles = {
        prompt = 'History❯ ',
        cwd_only = false,
        stat_file = true,
        include_current_session = false,
      },
      lsp = {
        prompt_postfix = '❯ ',
        cwd_only = false,
        async_or_timeout = 5000,
        file_icons = true,
        git_icons = false,
        includeDeclaration = true,
        code_actions = {
          prompt = 'Code Actions> ',
          ui_select = true,
          async = true,
          silent = true,
          previewer = "codeaction_native",
          winopts = {
            row = 0.40,
            height = 0.35,
            width = 0.80,
          },
        },
      },
      diagnostics = {
        prompt = 'Diagnostics❯ ',
        cwd_only = false,
        file_icons = true,
        git_icons = false,
        diag_icons = true,
        diag_source = true,
        icon_padding = '',
      },
    })
  end,
}